DATA SEGMENT
    INPUTNUM DB 8 DUP(0) ; PRODUCT
    ; INPUTNUM DB 1,2,3,4,4,3,2,1 ; DEBUG
    GETBTNARGUMENT DB 7 ; POINTER
DATA ENDS
CODE SEGMENT PARA 'CODE'
    ASSUME CS:CODE
MAIN PROC FAR
    CALL GETBTN
    CALL DISPLAY
    CALL PALINDROME
    JMP MAIN
MAIN ENDP

PALINDROME PROC NEAR
    MOV AX, 0080H ; PRODUCT
    ; MOV AX, DATA ; DEBUG
    MOV DS, AX
    MOV ES, AX
    LEA SI, INPUTNUM
    LEA DI, INPUTNUM + 7
    MOV CX, 4
FOREACHCHAR:
    MOV BL, BYTE PTR [SI]
    MOV BH, BYTE PTR [DI]
    INC SI
    DEC DI
    CMP BL, BH
    LOOPZ FOREACHCHAR
    JE ACK
    MOV AH, 0
    MOV DX, 8000H
    INT 30H
    RET
ACK:
    MOV AH, 0
    MOV DX, 0080H
    INT 30H
    RET
PALINDROME ENDP

GETBTN PROC NEAR
    MOV AX, 0080H ; PRODUCT
    ; MOV AX, DATA ; DEBUG
    MOV DS, AX
    MOV ES, AX
    LEA SI, GETBTNARGUMENT
    LEA DI, INPUTNUM
    ; READ BUTTON
    MOV AH, 0
    INT 33H
    SUB AL, 10000B
    ; IF AVAILABLE
    CMP AL, 10
    JB KEYDOWN ; YES
    RET ; NO
    ; END IF
KEYDOWN:
    INC BYTE PTR [SI]
    ; IF OUT OF RANGE
    CMP BYTE PTR [SI], 8
    JE CLEAN ; YES
    ; NO
    ; END IF
    XOR BX, BX
    MOV BL, BYTE PTR [SI]
    MOV BYTE PTR [BX][DI], AL
    RET
CLEAN:
    MOV CX, 7
    CLD
    STOSB
    MOV AL, 0
    REP STOSB
    MOV BYTE PTR [SI], 0
    RET
GETBTN ENDP

DISPLAY PROC NEAR
    MOV AX, 0080H ; PRODUCT
    ; MOV AX, DATA ; DEBUG
    MOV DS, AX
    LEA SI, INPUTNUM
    MOV CL, 4
    CLD
    LODSB ; HIGH 4 DIGITS START
    SHL AL, CL
    MOV DH, AL
    LODSB
    OR DH, AL
    LODSB
    SHL AL, CL
    MOV DL, AL
    LODSB
    OR DL, AL ; END RESULT IN DX
    PUSH DX
    LODSB ; LOW 4 DIGITS START
    SHL AL, CL
    MOV DH, AL
    LODSB
    OR DH, AL
    LODSB
    SHL AL, CL
    MOV DL, AL
    LODSB
    OR DL, AL ; END RESULT IN DX
    MOV AH, 0
    MOV AL, 0FFH
    INT 32H ; SET DIGIT ENABLED
    MOV AH, 1
    INT 32H ; DISPLAY LOW 4 DIGITS
    POP DX
    MOV AH, 2
    INT 32H ; DISPLAY HIGH 4 DIGITS
    RET
DISPLAY ENDP

CODE ENDS
END MAIN
